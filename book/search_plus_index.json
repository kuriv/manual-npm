{"./":{"url":"./","title":"npm","keywords":"","body":"npm npm 是 JavaScript 的包管理工具，也是 Node.js 的默认包管理工具。 通过 npm 可以安装、共享、分发代码，管理项目依赖关系。 "},"docs/安装 npm.html":{"url":"docs/安装 npm.html","title":"安装 npm","keywords":"","body":"安装 npm 安装 Node.js 时将自动安装 npm ，可以执行下面的命令来测试是否成功安装。 npm -v "},"docs/初始化.html":{"url":"docs/初始化.html","title":"初始化","keywords":"","body":"初始化 执行下面的命令，它会以交互方式要求你填写一些信息。 npm init 执行完毕后， npm 自动创建了 package.json 这个文件。 "},"docs/配置文件.html":{"url":"docs/配置文件.html","title":"配置文件","keywords":"","body":"配置文件 要开始在你的项目中使用 npm ，只需要一个 package.json 文件。 { \"name\": \"manual-npm\", \"version\": \"1.0.1\", \"description\": \"npm 手册\", \"main\": \"index.js\", \"dependencies\": {}, \"devDependencies\": {}, \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"repository\": { \"type\": \"git\", \"url\": \"git+https://github.com/kuriv/manual-npm.git\" }, \"keywords\": [ \"npm\", \"npm-package\", \"npm-module\", \"npm-scripts\", \"npm-registry\" ], \"author\": \"Kuriv Vesti\", \"license\": \"MIT\", \"bugs\": { \"url\": \"https://github.com/kuriv/manual-npm/issues\" }, \"homepage\": \"https://github.com/kuriv/manual-npm#readme\" } "},"docs/版本约束.html":{"url":"docs/版本约束.html","title":"版本约束","keywords":"","body":"版本约束 名称 实例 描述 版本号 1.0.2 指定版本号 版本范围 >=1.0, 指定版本范围 通配符 1.0.* >=1.0, 波浪号 ~1.2 ~1.2.3 >=1.2, >=1.2.3, 折音号 ^1.2 ^1.2.3 >=1.2, >=1.2.3, "},"docs/声明依赖.html":{"url":"docs/声明依赖.html","title":"声明依赖","keywords":"","body":"声明依赖 可以通过执行下面的命令，增加新的依赖包到当前目录的 package.json 文件中。 npm install bootstrap npm install bootstrap@4.4.1 在添加或修改依赖后，对应的依赖关系将被安装或者更新。另外需要注意的是， package.json 文件只会记录通过上面的方式安装的依赖信息，而这些依赖所依赖的其他的子依赖包则不会记录。 "},"docs/安装依赖.html":{"url":"docs/安装依赖.html","title":"安装依赖","keywords":"","body":"安装依赖 执行下面的命令， npm 会先从 package.json 文件中读取所有的依赖信息，然后从 package-lock.json 文件中获取所有依赖包的版本号，进行下载或者更新。 npm install 因此，正因为有了 package-lock.json 文件锁定所有依赖包的版本号，所以当执行上面的命令时， npm 不会自动更新 package.json 文件中的依赖包。必须通过重新声明依赖来进行安装，依赖包才会更新，同时 package-lock.json 文件中的版本号也会更新。 当 package.json 与 package-lock.json 都不存在时，如果执行上面的命令， npm 会重新生成 package-lock.json 文件，然后把 node_modules 中的所有依赖包信息全部记入 package-lock.json 文件，但不会生成 package.json 文件。 "},"docs/使用镜像.html":{"url":"docs/使用镜像.html","title":"使用镜像","keywords":"","body":"使用镜像 执行下面的命令，使用镜像加速。 npm config set registry https://registry.npm.taobao.org 还可以通过执行下面的命令查看是否配置成功。 npm config get registry "},"docs/发布包到 npm.html":{"url":"docs/发布包到 npm.html","title":"发布包到 npm","keywords":"","body":"发布包到 npm 执行下面的命令，输入用户名，密码和邮箱进行登录。 npm login --registry http://registry.npmjs.org 然后执行下面的命令，发布包到 npm 。 npm publish --registry http://registry.npmjs.org "}}